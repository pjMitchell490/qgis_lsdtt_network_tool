# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LSDTTNetworkToolDialog
                                 A QGIS plugin
 Builds a vectorized drainage network from LSDTopoTools outputs, divided at tributary junctions.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-29
        git sha              : $Format:%H$
        copyright            : (C) 2022 by MNiMORPH
        email                : mitc0560@umn.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import webbrowser

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.gui import QgsFileWidget
from qgis.core import QgsVectorLayer, QgsProject
from qgis.PyQt.QtGui import QIcon, QPixmap
import logging
from .lsdtt_network_tool import LSDTTNetworkTool

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgis_lsdtt_network_tool_dialog_base.ui'))


class QTextEditHandler(logging.Handler):
    def __init__(self, messageLog):
        super().__init__()
        self.widget = messageLog
        self.widget.setReadOnly(True)   


    
    def emit(self, record):
        msg = self.format(record)
        self.widget.appendPlainText(msg)


class LSDTTNetworkToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LSDTTNetworkToolDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.fwOutputFileName.setStorageMode(QgsFileWidget.SaveFile)

        self.messageLog = self.pteMessageLog

        self.logger = logging.getLogger(__name__)
        self.messageHandler = QTextEditHandler(self.messageLog)
        self.messageHandler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        self.logger.addHandler(self.messageHandler)
        # You can control the logging level
        self.logger.setLevel(logging.DEBUG)

        self.pbRun = QtWidgets.QPushButton("Run")
        self.pbRun.clicked.connect(self.onPbRunClicked)
        self.bbDialog.helpRequested.connect(self.onHelpClicked)
        self.bbDialog.addButton(self.pbRun, QtWidgets.QDialogButtonBox.ActionRole)

        self.pbSaveLog = QtWidgets.QPushButton()
        self.pbSaveLog.setIcon(QIcon(":images/themes/default/mActionFileSave.svg"))
        self.pbSaveLog.clicked.connect(self.onPbSaveLogClicked)
        self.bbLog.addButton(self.pbSaveLog, QtWidgets.QDialogButtonBox.ActionRole)

        self.pbCopyLog = QtWidgets.QPushButton()
        self.pbCopyLog.setIcon(QIcon(":images/themes/default/mActionEditCopy.svg"))
        self.pbCopyLog.clicked.connect(self.onPbCopyLogClicked)
        self.bbLog.addButton(self.pbCopyLog, QtWidgets.QDialogButtonBox.ActionRole)

        self.pbClearLog = QtWidgets.QPushButton()
        self.pbClearLog.setIcon(QIcon(":images/themes/default/console/iconClearConsole.svg"))
        self.pbClearLog.clicked.connect(self.onPbClearLogClicked)
        self.bbLog.addButton(self.pbClearLog, QtWidgets.QDialogButtonBox.ActionRole)
        
    def onHelpClicked(self):
        webbrowser.open('https://github.com/pjMitchell490/qgis_lsdtt_network_tool')

    def onPbRunClicked(self):
        # Set input values to pass to the Network Tool
        self.logger.debug("Run clicked")
        input = self.fwInputFileName.filePath()
        output = self.fwOutputFileName.filePath()
        basin_key = self.sbBasinKey.value()
        export_nodes = self.cbExportNodes.isChecked()

        # Instantiate and run tool
        tool = LSDTTNetworkTool(self, input, output, basin_key, export_nodes)
        output = tool.run_network_tool()
        # Add layers to map
        for layer_name, layer_path in output.items():
            vlayer = QgsVectorLayer(layer_path, layer_name, "ogr")
            QgsProject.instance().addMapLayer(vlayer)

    def onPbCopyLogClicked(self):
        self.logger.debug("Copying log")

        clipboard = QtWidgets.QApplication.clipboard()
        clipboard.setText(self.messageLog.toPlainText())

    def onPbClearLogClicked(self):
        self.messageLog.clear()

    def onPbSaveLogClicked(self):
        save_filename = QtWidgets.QFileDialog.getSaveFileName(self, "Save Message Log", "", ".txt")
        with open(save_filename[0] + save_filename[1], 'w') as f:
            f.write(self.messageLog.toPlainText())